package xs.tool.ant.buildfront;

import java.io.File;
import java.util.Date;
import java.util.Iterator;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Task;
import org.apache.tools.ant.types.FileList;
import org.apache.tools.ant.types.FileSet;
import org.apache.tools.ant.types.Path;
import org.apache.tools.ant.types.resources.FileResource;
import org.apache.tools.ant.types.resources.StringResource;
import org.apache.tools.ant.util.FileUtils;
import org.apache.tools.ant.util.ResourceUtils;

/**
 * Create random resources, for escaping browser cache
 * 
 * [e.g.] 
 *	<target name="flash.rename.release">
 *		<renameresource mode="release" jsdict="${src.dir}/common/basedata/resource.js" pkg="resource"> 
 *			<filelist dir="${build.dir}/flash">
				<file name="pulse_line.swf"/>
				<file name="pulse_radar.swf"/>
			</filelist>
 *		</renameresource>
 *	</target>
 * 
 * THEN 
 * (1) the a JS file 'src/common/basedata/resource.js' will be generated, including content:
 * 
 * 		var resource = resource || {};
 * 		resource.pulse_line_swf='asset/flash/122334323_rrr_pulse_line.swf';
 * 		resource.pulse_radar_swf='asset/flash/122334323_rrr_pulse_radar.swf';
 * 
 * 		(the variable name will be: fileName.replace(".", "_");)
 * 
 * (2) all of the generated swf file will be copied to "asset/flash"
 * 
 * @author sushuang
 * @date 2012-02-27
 * 
 */
public class RenameResource extends Task {

	private final String MODE_DEBUG = "debug";

	private final String MODE_RELEASE = "release";
	
	private final String TAG = "_rrr_";
	
	private String outputencoding = "UTF-8";
	
	private String mode; // input from build file (e.g. build.xml)

	private String pkg = ""; // input from build file (e.g. build.xml).

	private File jsdict; // input from build file (e.g. build.xml).
	
	private Path filePath; // input from build file (e.g. build.xml).
	
	private String version; // input from build file (e.g. build.xml).
	
	public void execute() throws BuildException {

		validate();

		renameResource();
	}

	private void renameResource() {
		
		System.out.println("rename resource. mode:" + mode);

		StringBuilder jsdictBuilder = new StringBuilder();

		String versionTag = generateVersionTag();

		createJsdictTitle(jsdictBuilder);

		Iterator it = filePath.iterator();
		
		while (it.hasNext()) {
			
			FileResource fr = (FileResource) it.next();
			
			System.out.println("rename resource -- file resource" + fr.getName());
			
			if (mode.equals(MODE_RELEASE)) {
				genResourceFile(fr, versionTag);
			}
			
			createJsdictLine(
					jsdictBuilder, 
					versionTag,
					fr);
		}
		
		saveJsdict(jsdictBuilder.toString());
	}

	private void validate() {
		if (!BuildHelper.isNotBlank(mode)) {
			throw new IllegalArgumentException("illegal mode");
		}
		if (jsdict == null) {
			throw new IllegalArgumentException("illegal jsdict");
		}
		if (filePath == null) {
			throw new IllegalArgumentException("illegal filePath");
		}
	}

	private String generateVersionTag() {
		if (BuildHelper.isNotBlank(version)) {
			return version + TAG;
		} else {
			return new Date().getTime() + TAG;
		}
	}
	
	private FileResource renameResourceFile(FileResource fr, String versionTag) {
		FileResource newFr = (FileResource)fr.getResource(".");
		String fName = fr.getFile().getName();
		File newFile = new File(fr.getFile().getAbsolutePath().replace(fName, versionTag + fName));
		newFr.setFile(newFile);
		return newFr;
	}
	
	private void genResourceFile(FileResource fr, String versionTag) {
		try {
			FileUtils f = FileUtils.getFileUtils();
			FileResource newFr =  renameResourceFile(fr, versionTag);
			f.copyFile(fr.getFile(), newFr.getFile());
			
			System.out.println("checking copy result ... ");
			if (!f.contentEquals(fr.getFile(), newFr.getFile())) {
				throw new Exception("files are not the same");
			}
			// ResourceUtils.copyResource(fr, renameResourceFile(fr, versionTag));
		} catch (Exception ex) {
			throw new BuildException(ex);
		}
	}
	
	private void createJsdictTitle(StringBuilder sb) {
		sb.append("\n /* This file is generated by ant plug-in RenameResource.java. */ \n \n");
		sb.append("var " + pkg + "=" + pkg + "||{};\n");
	}

	private void createJsdictLine(
						StringBuilder sb, 
						String versionTag, 
						FileResource fr) {
		String varName = fr.getFile().getName().replace(".", "_");
		if (mode.equals(MODE_RELEASE)) {
			fr = renameResourceFile(fr, versionTag);
		}
		String path = BuildHelper.formatPath(this, fr.toString());
		sb.append(pkg + "." + varName + "='" + path + "';\n");
	}

	private void saveJsdict(String outputStr) {
		StringResource s = new StringResource(outputStr);
		try {
			ResourceUtils.copyResource(s, (new FileResource(jsdict)), null, null, true, false,
					"utf-8", outputencoding, getProject());
		} catch (Exception ex) {
			throw new BuildException("desc=" + jsdict, ex);
		}
	}

	public void addPath(Path path) {
		getPath().add(path);
	}

	public void addFileSet(FileSet fileSet) {
		getPath().add(fileSet);
	}

	public void addFileList(FileList fileList) {
		getPath().add(fileList);
	}

	public Path getPath() {
		return filePath != null ? filePath : (filePath = new Path(getProject()));
	}

	public void setJsdict(File jsdict) {
		this.jsdict = jsdict;
	}

	public String getMode() {
		return mode;
	}

	public void setMode(String mode) {
		this.mode = mode.trim();
	}

	public String getPkg() {
		return pkg;
	}

	public void setPkg(String pkg) {
		this.pkg = pkg;
	}

	public String getOutputencoding() {
		return outputencoding;
	}

	public void setOutputencoding(String outputencoding) {
		this.outputencoding = outputencoding;
	}

	public String getVersion() {
		return version;
	}

	public void setVersion(String version) {
		this.version = version;
	}
}
