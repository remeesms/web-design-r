package xs.tool.ant.buildfront;

import java.io.File;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Task;
import org.apache.tools.ant.types.FileList;
import org.apache.tools.ant.types.FileSet;
import org.apache.tools.ant.types.Path;
import org.apache.tools.ant.types.Resource;
import org.apache.tools.ant.types.resources.FileResource;
import org.apache.tools.ant.types.resources.StringResource;
import org.apache.tools.ant.util.ResourceUtils;

/**
 * Create js and css file for ER debug
 * 
 * @usage
 * 		(1) Declare ant task "buildfront":
 * 		<p>
 * 		&lt;taskdef name="buildfront" classname="xs.tool.ant.buildfront.BuildFront"&gt; <br>
 * 			&nbsp;&lt;classpath&gt; <br>
 * 			&nbsp;&nbsp;&lt;pathelement location="${dir-tool}/ant/buildfront.jar" /&gt; <br>
 * 			&nbsp;&lt;/classpath&gt; <br>
 *      &lt;/taskdef&gt; <br>
 * 		</p>
 * 		
 * 		(2) Use ant task "buildfront" for Javascript
 * 		<p>
 *      &lt;buildfront <br>
 *      &nbsp;&nbsp;buildtype="js" <br>
 *      &nbsp;&nbsp;pathbasevar="_TMP_WEB_ROOT_" <br>
 *      &nbsp;&nbsp;destfile="${dir-build}/mycode-debug.js" <br> 
 *      &nbsp;&nbsp;outputencoding="utf-8"&gt; <br>
 * 		&nbsp;&lt;path refid="path-mycode.jssrc" /&gt; <br>
 *      &lt;/buildfront&gt; <br>
 * 		</p>
 * 
 * 		(3) Use ant task "buildfront" for CSS
 * 		<p>
 *      &lt;buildfront <br>
 *      &nbsp;&nbsp;buildtype="css" <br>
 *      &nbsp;&nbsp;pathbase="../../" <br>
 *      &nbsp;&nbsp;destfile="${dir-build}/css/mycode-debug.css" <br> 
 *      &nbsp;&nbsp;outputencoding="utf-8"&gt; <br>
 * 		&nbsp;&lt;path refid="path-mycode.csssrc" /&gt; <br>
 *      &lt;/buildfront&gt; <br>
 * 		</p>
 * 
 * About web root path: <br>
 *      If define pathbase="../", <br>
 *   	 	then all of the path will use pathbase as prefix, like this: "../xxx/xxx.xx"   <br>
 * 		If define pathbasevar="_SOME_GLOBAL_VAR_", <br>
 * 			then you should declare _SOME_GLOBAL_VAR_ in html firstly, <br>
 * 			like this: var _SOME_GLOBAL_VAR_ = '../'; <br>
 * 			(We usually do this using some template language (such as JSP, velocity, PHP),<br>
 * 		     which is able to provide the web root dynamically.)<br>
 * 			Then _SOME_GLOBAL_VAR_ will be used as the root path.<br>
 * 		pathbasevar is not supported when buildtype="css"
 * 
 * @author sushuang
 * @date 2011-11-05
 * 
 */
public class BuildFront extends Task {

	private String buildtype = "js";
	
	private String pathbase = "";
	
	private String pathbasevar = "";

	private String outputencoding = "UTF-8";

	private Resource dest = null;

	private Path filePath = null;
	
	public void execute() throws BuildException {

		System.out.println("buildType=" + buildtype);

		validate();
		
		String fileStr = createFileStr();
		
		save(fileStr);

	}

	private void save(String outputStr) {
		StringResource s = new StringResource(outputStr);
		try {
			ResourceUtils.copyResource(s, dest, null, null, true, false,
					"utf-8", outputencoding, getProject());
		} catch (Exception ex) {
			throw new BuildException("desc=" + dest, ex);
		}

	}

	private void validate() {
		if (filePath == null) {
			throw new BuildException("ERROR: must indicate path!");
		}
		if (dest == null) {
			throw new BuildException("ERROR: must indicate destfile!");
		}
	}

	private String createFileStr() {

		StringBuilder sb = new StringBuilder();
		
		createTitle(sb);
		
		if (this.buildtype.equalsIgnoreCase("js")) {
			createJsHead(sb);
		}
		String[] pathStrs = filePath.list();
		for (int i = 0; i < pathStrs.length; i++) {
			String pathItem = pathStrs[i];
			if (BuildHelper.isNotBlank(pathItem)) {
				pathItem = pathItem.trim();
				if (this.buildtype.equalsIgnoreCase("js")) {
					createJsLine(sb, BuildHelper.formatPath(this, pathItem));
				} else {
					createCssLine(sb, BuildHelper.formatPath(this, pathItem));
				}
			}
		}
		if (this.buildtype.equalsIgnoreCase("js")) {
			createJsTail(sb);
		}
		
		return sb.toString();
	}
	
	private void createTitle(StringBuilder sb) {
		sb.append("\n /* This file is generated by ant plug-in BuildFront.jar. */ \n \n");
	}

	private void createJsHead(StringBuilder sb) {
		sb.append("(function (){ \n");
		if (!isBlank(this.pathbasevar)) {
			sb.append("var WEB_ROOT = window." + this.pathbasevar + " || '';\n");
		}
	}
	
	private void createJsTail(StringBuilder sb) {
		sb.append("})();");
	}
	
	private void createJsLine(StringBuilder sb, String pathItem) {
		sb.append("document.write( '<script src=\"");
		if (!isBlank(this.pathbasevar)) {
			sb.append("' + WEB_ROOT + '/");
		} else {
			sb.append(this.pathbase + "/");
		}
		sb.append(pathItem);
		sb.append("\" type=\"text/javascript\"></sc' + 'ript>' );  \n");
	}

	private void createCssLine(StringBuilder sb, String pathItem) {
		sb.append("@import url(");
		sb.append(this.pathbase + "/");
		sb.append(pathItem);
		sb.append("); \n");
	}
	
	private boolean isBlank(String str) {
		return str == null || str.trim() == "";
	}

	public void addPath(Path path) {
		getPath().add(path);
	}
	
	public void addFileSet(FileSet fileSet) {
		getPath().add(fileSet);
	}
	
	public void addFileList(FileList fileList) {
		getPath().add(fileList);
	}
	
	public Path getPath() {
		return filePath != null ? filePath : (filePath = new Path(getProject()));
	}

	public void setDestfile(File destinationFile) {
		setDest(new FileResource(destinationFile));
	}

	public void setDest(Resource dest) {
		this.dest = dest;
	}

	public String getBuildtype() {
		return buildtype;
	}

	public void setBuildtype(String buildType) {
		this.buildtype = buildType.trim();
	}

	public String getOutputencoding() {
		return outputencoding;
	}

	public void setOutputencoding(String outputencoding) {
		this.outputencoding = outputencoding;
	}

	public String getPathbase() {
		return pathbase;
	}

	public void setPathbase(String webbase) {
		this.pathbase = webbase;
	}

	public String getPathbasevar() {
		return pathbasevar;
	}

	public void setPathbasevar(String pathbasevar) {
		this.pathbasevar = pathbasevar;
	}
}
